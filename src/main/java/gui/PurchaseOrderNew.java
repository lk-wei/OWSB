/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import component.ButtonEditor;
import component.ButtonRenderer;
import domain.Item;
import domain.PurchaseRequisition;
import domain.PurchaseRequisitionItem;
import domain.Supplier;
import domain.User;
import function.IdGenerator;
import function.NavigationManager;
import gui.table.PurchaseOrderTable;
import gui.table.PurchaseRequsitionTable;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import sample.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import repository.ItemRepo;
import repository.PurchaseRequisitionItemRepo;
import repository.PurchaseRequisitionRepo;
import repository.SupplierRepo;
import repository.UserRepo;

/**
 *
 * @author Kang Wei
 */
public class PurchaseOrderNew extends javax.swing.JFrame {
    /**
     * Creates new form DashBoardSample
     */
    private DefaultTableModel tableModel;
    private boolean isPurchaseOrderCodeUnique(String purchaseOrderCode) {
        // Check if the purchaseOrderCode already exists in purchaseOrder.txt
        // Read the file and check for overlap
        // Return true if unique, false otherwise
        // Implement the logic to read and check from the file
        return true; // For now, return true to allow saving
    }
    
    public PurchaseOrderNew() {
        initComponents();
        this.setLocationRelativeTo(null); //this will center your frame
        updateTable();  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void updateTable() {
        PurchaseRequisitionRepo prRepo = new PurchaseRequisitionRepo();
        try {
            // Get the table model from the repository
            jTable3.setModel(prRepo.getTableModel());

            // Hide the first column (ID column) if unnecessary
            TableColumn idColumn = jTable3.getColumnModel().getColumn(0);
            idColumn.setMinWidth(0);
            idColumn.setMaxWidth(0);
            idColumn.setPreferredWidth(0);
            idColumn.setResizable(false);

            // Add button renderer and editor for the last column (View Button)
            int lastColumnIndex = jTable3.getColumnModel().getColumnCount() - 1;
            TableColumn actionColumn = jTable3.getColumnModel().getColumn(lastColumnIndex);
            actionColumn.setCellRenderer(new ButtonRenderer());
            actionColumn.setCellEditor(new ButtonEditor(new JCheckBox()) {
                @Override
                public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                    Component c = super.getTableCellEditorComponent(table, value, isSelected, row, column);

                    // Remove previous action listeners to avoid multiple clicks
                    for (java.awt.event.ActionListener al : button.getActionListeners()) {
                        button.removeActionListener(al);
                    }

                    // Add new action listener for select action
                    button.addActionListener(e -> {
                        int modelRow = table.convertRowIndexToModel(row);
                        Object rawId = table.getModel().getValueAt(modelRow, 0);  // Get ID from the table (first column)
                        Long purchaseRequisitionId = Long.valueOf(rawId.toString());

                        try {
                            // Populate form fields using the selected PurchaseRequisition ID
                            fillFormFields(purchaseRequisitionId);
                        } catch (IOException ex) {
                            Logger.getLogger(PurchaseOrderNew.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    });
                    return c;
                }
            });

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
        }

    private void fillFormFields(Long purchaseRequisitionId) throws IOException {
        // Initialize the repositories
        PurchaseRequisitionRepo prRepo = new PurchaseRequisitionRepo();
        UserRepo userRepo = new UserRepo();  // Initialize the UserRepo
        ItemRepo itemRepo = new ItemRepo();  // Initialize the ItemRepo
        SupplierRepo supplierRepo = new SupplierRepo();  // Initialize the SupplierRepo
        PurchaseRequisitionItemRepo prItemRepo = new PurchaseRequisitionItemRepo();  // Initialize the PurchaseRequisitionItemRepo

        // Get Purchase Requisition details using the purchaseRequisitionId
        PurchaseRequisition purchaseRequisition = prRepo.getById(purchaseRequisitionId);

        // Check if the purchase requisition was found
        if (purchaseRequisition == null) {
            JOptionPane.showMessageDialog(this, "Purchase Requisition not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Fetch the requested user's full name
        User requestedUser = userRepo.getUserById(purchaseRequisition.getRequestedById());
        String requestedUserFullName = (requestedUser != null) ? requestedUser.getFullName() : "Unknown User";

        // Fetch Purchase Requisition Item details (assuming only one item per requisition for simplicity)
        List<PurchaseRequisitionItem> prItems = prItemRepo.getItemsByRequisitionId(purchaseRequisition.getId());
        PurchaseRequisitionItem prItem = prItems.isEmpty() ? null : prItems.get(0); // Assuming 1 item for now

        // Fetch item details if available
        String itemName = "Unknown Item";  // Default item name
        if (prItem != null) {
            Long itemId = prItem.getItemId();  // Get the item ID from PurchaseRequisitionItem
            Item item = itemRepo.getById(itemId);  // Get the Item by ID
            itemName = (item != null) ? item.getItemName() : "Unknown Item Name";  // Set item name if available
        }

        // Fetch supplier details
        String supplierCode = "Unknown Supplier Code";
        if (prItem != null) {
            Long supplierId = prItem.getSupplierId();  // Get the supplier ID from PurchaseRequisitionItem
            Supplier supplier = supplierRepo.getSupplierById(supplierId);  // Fetch supplier by ID
            supplierCode = (supplier != null) ? supplier.getSupplierCode() : "Unknown Supplier Code";  // Set supplier code if found
        }

        // Get the order quantity from PurchaseRequisitionItem
        Integer quantity = (prItem != null) ? prItem.getQuantity() : 0;

        // Setting the form fields with fetched details
        purchaseRequisitionIdField.setText(purchaseRequisition.getId().toString());
        requestedUserField.setText(requestedUserFullName);  // Setting the full name here
        requestDateField.setText(purchaseRequisition.getRequestDate().toString());
        requiredDateField.setText(purchaseRequisition.getRequiredDate().toString());
        statusField.setText(purchaseRequisition.getStatus());

        // Set item details
        itemNameField.setText(itemName);  // Set item name based on Item ID
        quantityField.setText(String.valueOf(quantity));  // Make sure quantity is displayed correctly

        // Set the supplier code or supplier id to supplierIdField
        supplierIdField.setText(supplierCode);  // Set supplier code here (or use supplierId if you prefer to display the ID instead of the code)
    }
    
    private void saveToFile(String filePath, String data) throws IOException {
        // Save the data to the corresponding file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
            writer.append(data);
            writer.newLine(); // Add a new line after each record
        }
    }

    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        purchaseOrderCodeField = new javax.swing.JTextField();
        purchaseRequisitionIdField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        itemNameField = new javax.swing.JTextField();
        supplierIdField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        requestedUserField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        requestDateField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        requiredDateField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        approveCheckBox = new javax.swing.JCheckBox();
        rejectCheckBox = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        expectedDeliveryDateField = new com.toedter.calendar.JDateChooser();
        orderDateField = new com.toedter.calendar.JDateChooser();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setFocusable(false);
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 800));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 800));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 800));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Purchase Order New");
        jLabel1.setToolTipText("");
        jLabel1.setMaximumSize(new java.awt.Dimension(800, 100));
        jLabel1.setMinimumSize(new java.awt.Dimension(800, 100));
        jLabel1.setPreferredSize(new java.awt.Dimension(800, 100));

        inputPanel.setMaximumSize(new java.awt.Dimension(800, 600));
        inputPanel.setMinimumSize(new java.awt.Dimension(800, 600));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Purchase Order Code");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Purchase Requsition Id");

        purchaseOrderCodeField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        purchaseRequisitionIdField.setEditable(false);
        purchaseRequisitionIdField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        cancelButton.setBackground(new java.awt.Color(255, 0, 51));
        cancelButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
                cancel(evt);
            }
        });

        saveButton.setBackground(new java.awt.Color(102, 204, 0));
        saveButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("Save");
        saveButton.setPreferredSize(new java.awt.Dimension(84, 32));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Item Name");

        itemNameField.setEditable(false);
        itemNameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        supplierIdField.setEditable(false);
        supplierIdField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Supplier Code");

        requestedUserField.setEditable(false);
        requestedUserField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Requested By User");

        requestDateField.setEditable(false);
        requestDateField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Request Date");

        requiredDateField.setEditable(false);
        requiredDateField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Required Date");

        quantityField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        quantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityFieldActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Quantity");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Status");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Order Date");

        statusField.setEditable(false);
        statusField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Expected Delivery Date ");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Aproval");

        approveCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        approveCheckBox.setForeground(new java.awt.Color(0, 153, 51));
        approveCheckBox.setText("APROVE");
        approveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveCheckBoxActionPerformed(evt);
            }
        });

        rejectCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rejectCheckBox.setForeground(new java.awt.Color(255, 0, 0));
        rejectCheckBox.setText("REJECT");
        rejectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectCheckBoxActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 206, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(orderDateField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(purchaseOrderCodeField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(supplierIdField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(requestDateField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(quantityField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(statusField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputPanelLayout.createSequentialGroup()
                                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(50, 50, 50)))
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(purchaseRequisitionIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(itemNameField)
                            .addComponent(requestedUserField)
                            .addComponent(requiredDateField)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel15)
                                    .addGroup(inputPanelLayout.createSequentialGroup()
                                        .addComponent(approveCheckBox)
                                        .addGap(18, 18, 18)
                                        .addComponent(rejectCheckBox))
                                    .addComponent(jLabel16))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(expectedDeliveryDateField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(75, 75, 75))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(purchaseOrderCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(purchaseRequisitionIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supplierIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestedUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requiredDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(expectedDeliveryDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(quantityField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(approveCheckBox)
                        .addComponent(rejectCheckBox))
                    .addComponent(orderDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
             // 1. Get the purchaseRequisitionId directly from the purchaseRequisitionIdField
             String purchaseRequisitionIdText = purchaseRequisitionIdField.getText();
             Long purchaseRequisitionId = null;

             // Check if the purchaseRequisitionId field is not empty
             if (!purchaseRequisitionIdText.isEmpty()) {
                 try {
                     // Parse the purchaseRequisitionId from the text field
                     purchaseRequisitionId = Long.valueOf(purchaseRequisitionIdText);
                 } catch (NumberFormatException e) {
                     JOptionPane.showMessageDialog(this, "Invalid Purchase Requisition ID. Please select a valid row.");
                     return;
                 }
             } else {
                 JOptionPane.showMessageDialog(this, "Purchase Requisition ID is empty. Please select a purchase requisition.");
                 return;
             }

             // 2. Get the other data from the fields
             String purchaseOrderCode = purchaseOrderCodeField.getText();
             if (!isPurchaseOrderCodeUnique(purchaseOrderCode)) {
                 JOptionPane.showMessageDialog(this, "Purchase Order Code already exists. Please enter a unique code.");
                 return;
             }

             // 3. Generate purchaseOrderId and purchaseOrderItemId using the ID generator
             Path purchaseOrderPath = Paths.get("database/purchaseOrder.txt");
             Long purchaseOrderId = IdGenerator.getNewId(purchaseOrderPath);

             Path purchaseOrderItemPath = Paths.get("database/purchaseOrderItem.txt");
             Long purchaseOrderItemId = IdGenerator.getNewId(purchaseOrderItemPath);

             // 4. Get requestedByUserId from PurchaseRequisition (instead of parsing it from requestedUserField)
             PurchaseRequisitionRepo prRepo = new PurchaseRequisitionRepo();
             PurchaseRequisition purchaseRequisition = prRepo.getById(purchaseRequisitionId);
             Long requestedByUserId = purchaseRequisition != null ? purchaseRequisition.getRequestedById() : null;

             if (requestedByUserId == null) {
                 JOptionPane.showMessageDialog(this, "Requested User ID is missing or invalid.");
                 return;
             }

             // 5. Fetch Supplier ID based on Supplier Code (e.g., "S001")
             String supplierCode = supplierIdField.getText();  // This should contain the supplier code like "S001"
             SupplierRepo supplierRepo = new SupplierRepo();
             Supplier supplier = supplierRepo.getSupplierById(supplierCode);  // Assuming getSupplierByCode method exists
             Long supplierId = supplier != null ? supplier.getId() : null;

             if (supplierId == null) {
                 JOptionPane.showMessageDialog(this, "Invalid Supplier Code. Please enter a valid supplier.");
                 return;
             }

             // 6. Get other fields (order date, expected delivery date, quantity)
             LocalDate orderDate = LocalDate.parse(orderDateField.getDate().toString()); // Order Date
             LocalDate expectedDeliveryDate = LocalDate.parse(expectedDeliveryDateField.getDate().toString()); // Expected Delivery Date
             Integer quantity = Integer.parseInt(quantityField.getText()); // Quantity

             // 7. Fetch the unitCost for the item
             ItemRepo itemRepo = new ItemRepo();
             Item item = itemRepo.getById(Long.parseLong(itemNameField.getText())); // Assuming item ID is in itemNameField
             Double unitCost = item != null ? item.getUnitCost() : 0.0; // Unit cost for the item

             // 8. Calculate the totalAmount
             Double totalAmount = unitCost * quantity;

             // 9. Save the purchaseOrder to purchaseOrder.txt
             String purchaseOrderData = purchaseOrderId + "," + purchaseOrderCode + "," + purchaseRequisitionId + "," 
                                        + requestedByUserId + "," + supplierId + "," + orderDate + "," + expectedDeliveryDate 
                                        + "," + "Pending" + "," + orderDate + "," + 1 + "," + totalAmount;
             saveToFile("purchaseOrder.txt", purchaseOrderData);

             // 10. Save the purchaseOrderItem to purchaseOrderItem.txt
             String purchaseOrderItemData = purchaseOrderItemId + "," + purchaseOrderId + "," + item.getId() + "," 
                                            + quantity + "," + unitCost;
             saveToFile("purchaseOrderItem.txt", purchaseOrderItemData);

             JOptionPane.showMessageDialog(this, "Purchase Order Created Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

         } catch (IOException ex) {
             JOptionPane.showMessageDialog(this, "Error saving purchase order: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
             Logger.getLogger(PurchaseOrderNew.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void rejectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectCheckBoxActionPerformed
        if (rejectCheckBox.isSelected()) {
            approveCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_rejectCheckBoxActionPerformed

    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        PurchaseOrderTable second = new PurchaseOrderTable();
        second.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancel

    private void quantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityFieldActionPerformed
        
    }//GEN-LAST:event_quantityFieldActionPerformed

    private void approveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveCheckBoxActionPerformed
        if (approveCheckBox.isSelected()) {
            rejectCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_approveCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseOrderNew().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox approveCheckBox;
    private javax.swing.JButton cancelButton;
    private com.toedter.calendar.JDateChooser expectedDeliveryDateField;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private com.toedter.calendar.JDateChooser orderDateField;
    private javax.swing.JTextField purchaseOrderCodeField;
    private javax.swing.JTextField purchaseRequisitionIdField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JCheckBox rejectCheckBox;
    private javax.swing.JTextField requestDateField;
    private javax.swing.JTextField requestedUserField;
    private javax.swing.JTextField requiredDateField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField statusField;
    private javax.swing.JTextField supplierIdField;
    // End of variables declaration//GEN-END:variables
}
